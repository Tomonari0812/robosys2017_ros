#!/usr/bin/env python
# -*- coding: UTF-8 -*-

#-----ライブラリのインポート-----
# GPIOの入出力ライブラリ
#import RPi.GPIO as GPIO

import rospy
from eggsystem.msg import Servo		#　配列を送るメッセージファイル
import Tkinter as Tk			# TkのGUIライブラリ
import time				# タイマのライブラリ
import serial				# USBシリアルのライブラリ
import smbus				# I2Cのライブラリ

#加速度センサ"ADXL345"のライブラリ
#from adxl345 import ADXL345

#"ADXL345"関数の値を代入
#adxl345 = ADXL345()


#-----GPIOの設定-----
#GPIOのpinの番号の定義
#GPIO.setmode(GPIO.BCM)

#GPIOの入出力の定義
#GPIO.setup(25, GPIO.OUT)


#------------------------------
# 変数定義
#------------------------------

#-----脚サーボの初期値-----
#左後ろ脚の初期値
pos_lbl_d = 7500
#左前脚の初期値
pos_lfl_d = 7500
#右後ろ脚の初期値
pos_rbl_d = 7500
#右前脚の初期値
pos_rfl_d = 7500

#-----車輪サーボの初期値-----
#左後ろ車輪の初期値
pos_lbw_d = 7500
pos_lfw_d = 7500
#右後ろ車輪の初期値
pos_rbw_d = 7500
#右前車輪の初期値
pos_rfw_d = 7500

#-----中央サーボの初期値-----
pos_cs_d = 7150


#-----移動用の関数-----
#前進関数
def forward(event):
    #変数へサーボの値を代入
    pos_lbw = 7400
    pos_lfw = 7400
    pos_rbw = 7600
    pos_rfw = 7600
    l.config(text = "forward", font=("Times", "60"))

#後退関数
def back(event):
    #変数へサーボの値を代入
    pos_lbw = 7600
    pos_lfw = 7600
    pos_rbw = 7400
    pos_rfw = 7400
    l.config(text = "back", font=("Times", "60"))

#左並行移動関数
def left(event):
    #変数へサーボの値を代入
    pos_lbw = 7400
    pos_lfw = 7600
    pos_rbw = 7400
    pos_rfw = 7600
    l.config(text = "left", font=("Times", "60"))

#右並行移動関数
def right(event):
    #変数へサーボの値を代入
    pos_lbw = 7600
    pos_lfw = 7400
    pos_rbw = 7600
    pos_rfw = 7400
    l.config(text = "right", font=("Times", "60"))

#左回転関数
def left_rotaion(event):
    #変数へサーボの値を代入
    pos_lbw = 7600
    pos_lfw = 7600
    pos_rbw = 7600
    pos_rfw = 7600
    l.config(text = "left_rotaion", font=("Times", "60"))

#右回転関数
def right_rotaion(event):
     #変数へサーボの値を代入
     pos_lbw = 7400
     pos_lfw = 7400
     pos_rbw = 7400
     pos_rfw = 7400
     l.config(text = "right_rotaion", font=("Times", "60"))
#サーボを電源を安定させるための処理
time.sleep(2)

#停止関数
def stop(event):
     #変数へサーボの値を代入
     pos_lbw = 7500
     pos_lfw = 7500
     pos_rbw = 7500
     pos_rfw = 7500
     l.config(text = "stop",font=("Times", "60"))

#-----リフトアップ用の関数-----
def lift_up_q(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d + 1000
    pos_lfl = pos_lfl_d + 1000
    pos_rbl = pos_rbl_d + 1000
    pos_rfl = pos_rfl_d + 1000
    l.config(text = "lift_up_q",font=("Times", "60"))

def lift_up_1(event):
     #変数へサーボの値を代入
    pos_lbl = pos_lbl_d + 800
    pos_lfl = pos_lfl_d + 800
    pos_rbl = pos_rbl_d + 800
    pos_rfl = pos_rfl_d + 800
    l.config(text = "lift_up_1",font=("Times", "60"))

def lift_up_2(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d + 600
    pos_lfl = pos_lfl_d + 600
    pos_rbl = pos_rbl_d + 600
    pos_rfl = pos_rfl_d + 600
    l.config(text = "lift_up_2",font=("Times", "60"))

def lift_up_3(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d + 400
    pos_lfl = pos_lfl_d + 400
    pos_rbl = pos_rbl_d + 400
    pos_rfl = pos_rfl_d + 400
    l.config(text = "lift_up_3",font=("Times", "60"))

def lift_up_4(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d + 200
    pos_lfl = pos_lfl_d + 200
    pos_rbl = pos_rbl_d + 200
    pos_rfl = pos_rfl_d + 200
    l.config(text = "lift_up_4",font=("Times", "60"))

def lift_up_5(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d + 000
    pos_lfl = pos_lfl_d + 000
    pos_rbl = pos_rbl_d + 000
    pos_rfl = pos_rfl_d + 000
    l.config(text = "lift_up_5",font=("Times", "60"))

def lift_up_6(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d - 200
    pos_lfl = pos_lfl_d - 200
    pos_rbl = pos_rbl_d - 200
    pos_rfl = pos_rfl_d - 200
    l.config(text = "lift_up_6",font=("Times", "60"))

def lift_up_7(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d - 400
    pos_lfl = pos_lfl_d - 400
    pos_rbl = pos_rbl_d - 400
    pos_rfl = pos_rfl_d - 400
    l.config(text = "lift_up_7",font=("Times", "60"))

def lift_up_8(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d - 600
    pos_lfl = pos_lfl_d - 600
    pos_rbl = pos_rbl_d - 600
    pos_rfl = pos_rfl_d - 600
    l.config(text = "lift_up_8",font=("Times", "60"))

def lift_up_9(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d - 800
    pos_lfl = pos_lfl_d - 800
    pos_rbl = pos_rbl_d - 800
    pos_rfl = pos_rfl_d - 800
    l.config(text = "lift_up_9",font=("Times", "60"))

def lift_up_0(event):
    #変数へサーボの値を代入
    pos_lbl = pos_lbl_d - 1000
    pos_lfl = pos_lfl_d - 1000
    pos_rbl = pos_rbl_d - 1000
    pos_rfl = pos_rfl_d - 1000
    l.config(text = "lift_up_0",font=("Times", "60"))

#------------main-------------------------------------------

#サーボを電源を安定させるための処理
time.sleep(2)

#初期姿勢に移動
pos_lbw = pos_lbw_d
pos_lfw = pos_lfw_d
pos_rbw = pos_rbw_d
pos_rfw = pos_rfw_d
pos_lbl = pos_lbl_d-1300
pos_lfl = pos_lfl_d-1300
pos_rbl = pos_rbl_d-1300
pos_rfl = pos_rfl_d-1300
pos_cs = pos_cs_d
'''
osa = 0
while osa < 1300:
  pos_lbl = pos_lbl_d-1300+osa
  pos_lfl = pos_lfl_d-1300+osa
  pos_rbl = pos_rbl_d-1300+osa
  pos_rfl = pos_rfl_d-1300+osa
  osa += 1
  time.sleep(0.01)
  if osa % 10 == 0:
    n = Servo()
    print"1"
    n.Pulse = [pos_lbw,pos_lfw,pos_rbw,pos_rfw,pos_lbl,pos_lfl,pos_rbl,pos_rfl,pos_cs]
    pub.publish(n)
    time.sleep(0.1)


#キーバインドによる処理
root = Tk.Tk()
t = root.title("Tkinter_Eggbeater2")

l = Tk.Label(root, text="press command key", font=("Times","50"))

#-----キーバインドの割り当て-----
#移動用のキーバインド
l.bind("<KeyPress-w>", forward)
l.bind("<KeyRelease-w>", stop)

l.bind("<KeyPress-s>", back)
l.bind("<KeyRelease-s>", stop)

l.bind("<KeyPress-a>", left)
l.bind("<KeyRelease-a>", stop)

l.bind("<KeyPress-d>", right)
l.bind("<KeyRelease-d>", stop)

l.bind("<KeyPress-j>", left_rotaion)
l.bind("<KeyRelease-j>", stop)

l.bind("<KeyPress-l>", right_rotaion)
l.bind("<KeyRelease-l>", stop)

l.bind("<KeyPress-k>", stop)

#リフトアップ用のキーバインド
l.bind("<KeyPress-q>", lift_up_q)
l.bind("<KeyPress-1>", lift_up_1)
l.bind("<KeyPress-2>", lift_up_2)
l.bind("<KeyPress-3>", lift_up_3)
l.bind("<KeyPress-4>", lift_up_4)
l.bind("<KeyPress-5>", lift_up_5)
l.bind("<KeyPress-6>", lift_up_6)
l.bind("<KeyPress-7>", lift_up_7)
l.bind("<KeyPress-8>", lift_up_8)
l.bind("<KeyPress-9>", lift_up_9)
l.bind("<KeyPress-0>", lift_up_0)
'''

#------------------------publish---------------------------

rospy.init_node('move')
pub = rospy.Publisher('movedata',Servo,queue_size = 10)
rate = rospy.Rate(10)

while not rospy.is_shutdown():
    osa = 0
    while osa < 1300:
      pos_lbl = pos_lbl_d-1300+osa
      pos_lfl = pos_lfl_d-1300+osa
      pos_rbl = pos_rbl_d-1300+osa
      pos_rfl = pos_rfl_d-1300+osa
      osa += 1
      n = Servo()
      print"1"
      n.Pulse = [pos_lbw,pos_lfw,pos_rbw,pos_rfw,pos_lbl,pos_lfl,pos_rbl,pos_rfl,pos_cs]
      pub.publish(n)
      time.sleep(0.01)
      if osa % 10 == 0:
        time.sleep(0.1)

    #キーバインドによる処理
    root = Tk.Tk()
    t = root.title("Tkinter_Eggbeater2")
    
    l = Tk.Label(root, text="press command key", font=("Times","50"))
    
    #-----キーバインドの割り当て-----
    #移動用のキーバインド
    l.bind("<KeyPress-w>", forward)
    l.bind("<KeyRelease-w>", stop)
    
    l.bind("<KeyPress-s>", back)
    l.bind("<KeyRelease-s>", stop)
    
    l.bind("<KeyPress-a>", left)
    l.bind("<KeyRelease-a>", stop)
    
    l.bind("<KeyPress-d>", right)
    l.bind("<KeyRelease-d>", stop)
    
    l.bind("<KeyPress-j>", left_rotaion)
    l.bind("<KeyRelease-j>", stop)
    
    l.bind("<KeyPress-l>", right_rotaion)
    l.bind("<KeyRelease-l>", stop)
    
    l.bind("<KeyPress-k>", stop)
    
    #リフトアップ用のキーバインド
    l.bind("<KeyPress-q>", lift_up_q)
    l.bind("<KeyPress-1>", lift_up_1)
    l.bind("<KeyPress-2>", lift_up_2)
    l.bind("<KeyPress-3>", lift_up_3)
    l.bind("<KeyPress-4>", lift_up_4)
    l.bind("<KeyPress-5>", lift_up_5)
    l.bind("<KeyPress-6>", lift_up_6)
    l.bind("<KeyPress-7>", lift_up_7)
    l.bind("<KeyPress-8>", lift_up_8)
    l.bind("<KeyPress-9>", lift_up_9)
    l.bind("<KeyPress-0>", lift_up_0)
    
    n = Servo()
    print"2"
    n.Pulse = [pos_lbw,pos_lfw,pos_rbw,pos_rfw,pos_lbl,pos_lfl,pos_rbl,pos_rfl,pos_cs]
    pub.publish(n)
    rate.sleep()

    #キーバインド割り込みの実行
    l.focus_set()
    l.pack()
    l.mainloop()
